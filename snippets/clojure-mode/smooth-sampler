#name: smooth-sampler
# --
(do (def voices 8) (def durations [1/8 1/4 1/2 1]) (def pattern-size 8)
    (def footsteps2-s (sample "/Users/josephwilk/Workspace/music/samples/MagicDust/FOOTSTEPS/MD_FOOTSTEPS_002.wav"))
    (def footsteps1-s (sample "/Users/josephwilk/Workspace/music/samples/MagicDust/FOOTSTEPS/MD_FOOTSTEPS_001.wav"))
    (def footsteps3-s (sample "/Users/josephwilk/Workspace/music/samples/MagicDust/FOOTSTEPS/MD_FOOTSTEPS_001.wav"))
    (def new-s (sample "/Users/josephwilk/Workspace/music/samples/CPA_TDDC/CPA_TDDC/TDDC_WAV_LPS/TDDC_WASH_LPS/TDDC_WASH_LPS_90_BPM/TDDC_Wash_10_Kubrik_90_Fm.wav"))
    (def smooth-samples (take 16 (cycle [footsteps2-s new-s])))
    (def perc-samples [rf-full-s rf-full-s rf-theorems-s rf-fx-s rf-theorems-s rf-theorems-s rf-full-s rf-full-s])
    (def smooth-samples [rf-fx-s rf-solve-s rf-theorems-s rf-full-s rf-solve-s rf-fx-s rf-full-s rf-solve-s]))$1

(kill buf->perc-inst)
(kill buf->smooth-inst)

(on-beat-trigger 64 #(do (spin-for (rand-int voices) durations (:duration gs))))
(on-beat-trigger 64 #(do (spin-for (rand-int voices) durations (:duration ss))))

(def ss (sample->smooth [] voices pattern-size smooth-samples))
(pattern! (:duration ss) [])

(pattern! (:duration ss) [0 0 0 0  1/12 0 (+ 1/8 0.01) 1/4])
(pattern! (:duration ss) [1/2 0 0 1/2 0 0 1/12 0])
(pattern! (:amp ss)      [0.4 0.1])
(pattern! (:fraction ss) [1.0 -1.0])


(def gs (sample->percussive [rf-solve-s rf-full-s rf-theorems-s rf-full-s rf-fx-s] voices pattern-size))
(def gs (sample->percussive perc-samples voices pattern-size))

(pattern! (:duration gs) [1/64 1/2 1/2 1/2 1/64 1/2 1/2 1/2])
(pattern! (:duration gs) [1/3 1/4 1/2 1/2 1/4 0 1/4 1/4])
(pattern! (:amp gs)      [0.4 0.1 0.1 0.1 0.1 0.1 0.1 0.1])
(pattern! (:fraction gs) [1 0.9 0.1 0.1 0.1 0.1 0.1 0.1])
(pattern! (:fraction gs) [0.14313303 0.641848 0.79618585 0.3601217 0.8650944 0.5890187 0.2760824 0.116221964])
