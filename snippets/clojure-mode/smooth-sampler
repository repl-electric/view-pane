#name: smooth-sampler
# --
(do (def voices 8) (def durations [1/8 1/4 1/2 1]) (def pattern-size 8)
    (def perc-samples [rf-full-s rf-full-s rf-theorems-s rf-fx-s rf-theorems-s rf-theorems-s rf-full-s rf-full-s])
    (def smooth-samples [rf-fx-s rf-solve-s rf-theorems-s rf-full-s rf-solve-s rf-fx-s rf-full-s rf-solve-s])) $1

(kill buf->perc-inst)
(kill buf->smooth-inst)

(on-beat-trigger 64 #(do (spin-for (rand-int voices) durations (:duration gs))))
(on-beat-trigger 64 #(do (spin-for (rand-int voices) durations (:duration ss))))

(def ss (sample->smooth [] voices pattern-size smooth-samples))
(pattern! (:duration ss) [])

(pattern! (:amp ss)      [0.18 0.18 0.18 0.18 0.18 0.18 0.18 0.18])
(pattern! (:fraction ss) [0.82283354 0.45919186 0.54692537 0.0045858636 0.034107555 0.6987561 0.07871687 0.24623081])
(pattern! (:fraction ss) [0.8845941 0.3484526 0.02742675 0.82377213 0.7945769 0.772626 0.45249504 0.35252455])
(pattern! (:fraction ss) [0.2470634 0.5662428 0.63178784 0.9357417 0.66654444 0.0969285 0.40005338 0.675227])

(def gs (sample->percussive [rf-solve-s rf-full-s rf-theorems-s rf-full-s rf-fx-s] voices pattern-size))
(def gs (sample->percussive perc-samples voices pattern-size))

(pattern! (:duration gs) [1/64 1/2 1/2 1/2 1/64 1/2 1/2 1/2])
(pattern! (:duration gs) [1/3 1/4 1/2 1/2 1/4 0 1/4 1/4])
(pattern! (:amp gs)      [0.4 0.1 0.1 0.1 0.1 0.1 0.1 0.1])
(pattern! (:fraction gs) [1 0.9 0.1 0.1 0.1 0.1 0.1 0.1])
(pattern! (:fraction gs) [0.14313303 0.641848 0.79618585 0.3601217 0.8650944 0.5890187 0.2760824 0.116221964])
